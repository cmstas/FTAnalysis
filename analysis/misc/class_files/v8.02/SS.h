// -*- C++ -*-
// This is a header file generated with the command:
// makeCMS3ClassFiles("../../batch/T5QQQQVV_main.root", "t", "SSAG", "ss", "samesign")

#ifndef SSAG_H
#define SSAG_H

#include "Math/LorentzVector.h"
#include "Math/Point3D.h"
#include "TMath.h"
#include "TBranch.h"
#include "TTree.h"
#include "TH1F.h"
#include "TFile.h"
#include "TBits.h"
#include <vector>
#include <unistd.h>
#include <chrono>
#include <ctime>
#include <numeric>
typedef ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > LorentzVector;

using namespace std; 
class SSAG {
private: 
protected: 
	unsigned int index;
	bool     lep1_isPrompt_;
	TBranch *lep1_isPrompt_branch;
	bool     lep1_isPrompt_isLoaded;
	bool     lep1_isDirectPrompt_;
	TBranch *lep1_isDirectPrompt_branch;
	bool     lep1_isDirectPrompt_isLoaded;
	bool     lep1_isStat3_;
	TBranch *lep1_isStat3_branch;
	bool     lep1_isStat3_isLoaded;
	bool     lep2_isPrompt_;
	TBranch *lep2_isPrompt_branch;
	bool     lep2_isPrompt_isLoaded;
	bool     lep2_isDirectPrompt_;
	TBranch *lep2_isDirectPrompt_branch;
	bool     lep2_isDirectPrompt_isLoaded;
	bool     lep2_isStat3_;
	TBranch *lep2_isStat3_branch;
	bool     lep2_isStat3_isLoaded;
	float    met_;
	TBranch *met_branch;
	bool     met_isLoaded;
	float    modmet_;
	TBranch *modmet_branch;
	bool     modmet_isLoaded;
	int      filenumber_;
	TBranch *filenumber_branch;
	bool     filenumber_isLoaded;
	float    metPhi_;
	TBranch *metPhi_branch;
	bool     metPhi_isLoaded;
	float    rawmet_;
	TBranch *rawmet_branch;
	bool     rawmet_isLoaded;
	float    calomet_;
	TBranch *calomet_branch;
	bool     calomet_isLoaded;
	float    rawmetPhi_;
	TBranch *rawmetPhi_branch;
	bool     rawmetPhi_isLoaded;
	float    modmetPhi_;
	TBranch *modmetPhi_branch;
	bool     modmetPhi_isLoaded;
	unsigned long long event_;
	TBranch *event_branch;
	bool     event_isLoaded;
	int      lumi_;
	TBranch *lumi_branch;
	bool     lumi_isLoaded;
	int      run_;
	TBranch *run_branch;
	bool     run_isLoaded;
	bool     filt_csc_;
	TBranch *filt_csc_branch;
	bool     filt_csc_isLoaded;
	bool     filt_hbhe_;
	TBranch *filt_hbhe_branch;
	bool     filt_hbhe_isLoaded;
	bool     filt_hcallaser_;
	TBranch *filt_hcallaser_branch;
	bool     filt_hcallaser_isLoaded;
	bool     filt_ecaltp_;
	TBranch *filt_ecaltp_branch;
	bool     filt_ecaltp_isLoaded;
	bool     filt_trkfail_;
	TBranch *filt_trkfail_branch;
	bool     filt_trkfail_isLoaded;
	bool     is_real_data_;
	TBranch *is_real_data_branch;
	bool     is_real_data_isLoaded;
	float    scale1fb_;
	TBranch *scale1fb_branch;
	bool     scale1fb_isLoaded;
	float    xsec_;
	TBranch *xsec_branch;
	bool     xsec_isLoaded;
	float    xsec_ps_;
	TBranch *xsec_ps_branch;
	bool     xsec_ps_isLoaded;
	vector<TString> *sparmNames_;
	TBranch *sparmNames_branch;
	bool     sparmNames_isLoaded;
	vector<float> *sparms_;
	TBranch *sparms_branch;
	bool     sparms_isLoaded;
	float    xsec_error_;
	TBranch *xsec_error_branch;
	bool     xsec_error_isLoaded;
	float    kfactor_;
	TBranch *kfactor_branch;
	bool     kfactor_isLoaded;
	float    gen_met_;
	TBranch *gen_met_branch;
	bool     gen_met_isLoaded;
	vector<float> *genweights_;
	TBranch *genweights_branch;
	bool     genweights_isLoaded;
	vector<string> *genweightsID_;
	TBranch *genweightsID_branch;
	bool     genweightsID_isLoaded;
	float    gen_met_phi_;
	TBranch *gen_met_phi_branch;
	bool     gen_met_phi_isLoaded;
	int      njets_;
	TBranch *njets_branch;
	bool     njets_isLoaded;
	int      njets_raw_;
	TBranch *njets_raw_branch;
	bool     njets_raw_isLoaded;
	int      hyp_class_;
	TBranch *hyp_class_branch;
	bool     hyp_class_isLoaded;
	ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *lep1_p4_;
	TBranch *lep1_p4_branch;
	bool     lep1_p4_isLoaded;
	ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *lep2_p4_;
	TBranch *lep2_p4_branch;
	bool     lep2_p4_isLoaded;
	float    ht_raw_;
	TBranch *ht_raw_branch;
	bool     ht_raw_isLoaded;
	float    ht_;
	TBranch *ht_branch;
	bool     ht_isLoaded;
	int      lep1_motherID_;
	TBranch *lep1_motherID_branch;
	bool     lep1_motherID_isLoaded;
	int      lep2_motherID_;
	TBranch *lep2_motherID_branch;
	bool     lep2_motherID_isLoaded;
	int      lep3_motherID_;
	TBranch *lep3_motherID_branch;
	bool     lep3_motherID_isLoaded;
	int      lep1_mc_id_;
	TBranch *lep1_mc_id_branch;
	bool     lep1_mc_id_isLoaded;
	int      lep2_mc_id_;
	TBranch *lep2_mc_id_branch;
	bool     lep2_mc_id_isLoaded;
	int      lep1_id_;
	TBranch *lep1_id_branch;
	bool     lep1_id_isLoaded;
	int      lep2_id_;
	TBranch *lep2_id_branch;
	bool     lep2_id_isLoaded;
	float    lep1_coneCorrPt_;
	TBranch *lep1_coneCorrPt_branch;
	bool     lep1_coneCorrPt_isLoaded;
	float    lep2_coneCorrPt_;
	TBranch *lep2_coneCorrPt_branch;
	bool     lep2_coneCorrPt_isLoaded;
	float    lep3_coneCorrPt_;
	TBranch *lep3_coneCorrPt_branch;
	bool     lep3_coneCorrPt_isLoaded;
	int      lep1_idx_;
	TBranch *lep1_idx_branch;
	bool     lep1_idx_isLoaded;
	int      lep2_idx_;
	TBranch *lep2_idx_branch;
	bool     lep2_idx_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *jets_;
	TBranch *jets_branch;
	bool     jets_isLoaded;
	vector<float> *btags_disc_;
	TBranch *btags_disc_branch;
	bool     btags_disc_isLoaded;
	vector<float> *btags_disc_mva_;
	TBranch *btags_disc_mva_branch;
	bool     btags_disc_mva_isLoaded;
	vector<float> *btags_disc_ivf_;
	TBranch *btags_disc_ivf_branch;
	bool     btags_disc_ivf_isLoaded;
	vector<float> *jets_disc_;
	TBranch *jets_disc_branch;
	bool     jets_disc_isLoaded;
	vector<float> *jets_disc_mva_;
	TBranch *jets_disc_mva_branch;
	bool     jets_disc_mva_isLoaded;
	vector<float> *jets_disc_csv_;
	TBranch *jets_disc_csv_branch;
	bool     jets_disc_csv_isLoaded;
	vector<float> *jets_JEC_;
	TBranch *jets_JEC_branch;
	bool     jets_JEC_isLoaded;
	vector<float> *btags_JEC_;
	TBranch *btags_JEC_branch;
	bool     btags_JEC_isLoaded;
	vector<float> *jets_undoJEC_;
	TBranch *jets_undoJEC_branch;
	bool     jets_undoJEC_isLoaded;
	vector<float> *btags_undoJEC_;
	TBranch *btags_undoJEC_branch;
	bool     btags_undoJEC_isLoaded;
	vector<float> *btags_unc_;
	TBranch *btags_unc_branch;
	bool     btags_unc_isLoaded;
	vector<float> *jets_unc_;
	TBranch *jets_unc_branch;
	bool     jets_unc_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *btags_;
	TBranch *btags_branch;
	bool     btags_isLoaded;
	int      nbtags_;
	TBranch *nbtags_branch;
	bool     nbtags_isLoaded;
	int      ncharginos_;
	TBranch *ncharginos_branch;
	bool     ncharginos_isLoaded;
	int      higgs_mass_;
	TBranch *higgs_mass_branch;
	bool     higgs_mass_isLoaded;
	int      nbtags_raw_;
	TBranch *nbtags_raw_branch;
	bool     nbtags_raw_isLoaded;
	float    sf_dilepTrig_hpt_;
	TBranch *sf_dilepTrig_hpt_branch;
	bool     sf_dilepTrig_hpt_isLoaded;
	float    sf_dilepTrig_lpt_;
	TBranch *sf_dilepTrig_lpt_branch;
	bool     sf_dilepTrig_lpt_isLoaded;
	float    sf_dilepTrig_vlpt_;
	TBranch *sf_dilepTrig_vlpt_branch;
	bool     sf_dilepTrig_vlpt_isLoaded;
	int      hyp_type_;
	TBranch *hyp_type_branch;
	bool     hyp_type_isLoaded;
	float    sf_dilep_eff_;
	TBranch *sf_dilep_eff_branch;
	bool     sf_dilep_eff_isLoaded;
	float    mt_;
	TBranch *mt_branch;
	bool     mt_isLoaded;
	float    mt_l2_;
	TBranch *mt_l2_branch;
	bool     mt_l2_isLoaded;
	float    mt2_;
	TBranch *mt2_branch;
	bool     mt2_isLoaded;
	float    mtmin_;
	TBranch *mtmin_branch;
	bool     mtmin_isLoaded;
	int      lep1_id_gen_;
	TBranch *lep1_id_gen_branch;
	bool     lep1_id_gen_isLoaded;
	int      lep2_id_gen_;
	TBranch *lep2_id_gen_branch;
	bool     lep2_id_gen_isLoaded;
	ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *lep1_p4_gen_;
	TBranch *lep1_p4_gen_branch;
	bool     lep1_p4_gen_isLoaded;
	ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *lep2_p4_gen_;
	TBranch *lep2_p4_gen_branch;
	bool     lep2_p4_gen_isLoaded;
	int      lep3_id_;
	TBranch *lep3_id_branch;
	bool     lep3_id_isLoaded;
	int      lep3_idx_;
	TBranch *lep3_idx_branch;
	bool     lep3_idx_isLoaded;
	ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *lep3_p4_;
	TBranch *lep3_p4_branch;
	bool     lep3_p4_isLoaded;
	int      lep3_quality_;
	TBranch *lep3_quality_branch;
	bool     lep3_quality_isLoaded;
	int      lep4_id_;
	TBranch *lep4_id_branch;
	bool     lep4_id_isLoaded;
	int      lep4_idx_;
	TBranch *lep4_idx_branch;
	bool     lep4_idx_isLoaded;
	ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *lep4_p4_;
	TBranch *lep4_p4_branch;
	bool     lep4_p4_isLoaded;
	float    lep1_iso_;
	TBranch *lep1_iso_branch;
	bool     lep1_iso_isLoaded;
	float    lep2_iso_;
	TBranch *lep2_iso_branch;
	bool     lep2_iso_isLoaded;
	float    lep1_tkIso_;
	TBranch *lep1_tkIso_branch;
	bool     lep1_tkIso_isLoaded;
	float    lep2_tkIso_;
	TBranch *lep2_tkIso_branch;
	bool     lep2_tkIso_isLoaded;
	ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *dilep_p4_;
	TBranch *dilep_p4_branch;
	bool     dilep_p4_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *genps_p4_;
	TBranch *genps_p4_branch;
	bool     genps_p4_isLoaded;
	vector<int> *genps_id_;
	TBranch *genps_id_branch;
	bool     genps_id_isLoaded;
	vector<int> *genps_id_mother_;
	TBranch *genps_id_mother_branch;
	bool     genps_id_mother_isLoaded;
	vector<int> *genps_idx_mother_;
	TBranch *genps_idx_mother_branch;
	bool     genps_idx_mother_isLoaded;
	vector<int> *btags_flavor_;
	TBranch *btags_flavor_branch;
	bool     btags_flavor_isLoaded;
	vector<int> *genps_status_;
	TBranch *genps_status_branch;
	bool     genps_status_isLoaded;
	vector<int> *jets_flavor_;
	TBranch *jets_flavor_branch;
	bool     jets_flavor_isLoaded;
	vector<int> *genps_id_grandma_;
	TBranch *genps_id_grandma_branch;
	bool     genps_id_grandma_isLoaded;
	bool     lep1_passes_id_;
	TBranch *lep1_passes_id_branch;
	bool     lep1_passes_id_isLoaded;
	bool     lep2_passes_id_;
	TBranch *lep2_passes_id_branch;
	bool     lep2_passes_id_isLoaded;
	bool     lep3_passes_id_;
	TBranch *lep3_passes_id_branch;
	bool     lep3_passes_id_isLoaded;
	bool     lep4_passes_id_;
	TBranch *lep4_passes_id_branch;
	bool     lep4_passes_id_isLoaded;
	bool     lep1_tight_;
	TBranch *lep1_tight_branch;
	bool     lep1_tight_isLoaded;
	bool     lep1_veto_;
	TBranch *lep1_veto_branch;
	bool     lep1_veto_isLoaded;
	bool     lep1_fo_;
	TBranch *lep1_fo_branch;
	bool     lep1_fo_isLoaded;
	bool     lep2_tight_;
	TBranch *lep2_tight_branch;
	bool     lep2_tight_isLoaded;
	bool     lep2_veto_;
	TBranch *lep2_veto_branch;
	bool     lep2_veto_isLoaded;
	bool     lep2_fo_;
	TBranch *lep2_fo_branch;
	bool     lep2_fo_isLoaded;
	bool     lep3_tight_;
	TBranch *lep3_tight_branch;
	bool     lep3_tight_isLoaded;
	bool     lep3_veto_;
	TBranch *lep3_veto_branch;
	bool     lep3_veto_isLoaded;
	bool     lep3_fo_;
	TBranch *lep3_fo_branch;
	bool     lep3_fo_isLoaded;
	bool     lep4_tight_;
	TBranch *lep4_tight_branch;
	bool     lep4_tight_isLoaded;
	bool     lep4_veto_;
	TBranch *lep4_veto_branch;
	bool     lep4_veto_isLoaded;
	bool     lep4_fo_;
	TBranch *lep4_fo_branch;
	bool     lep4_fo_isLoaded;
	float    lep1_dxyPV_;
	TBranch *lep1_dxyPV_branch;
	bool     lep1_dxyPV_isLoaded;
	float    lep2_dxyPV_;
	TBranch *lep2_dxyPV_branch;
	bool     lep2_dxyPV_isLoaded;
	float    lep1_dZ_;
	TBranch *lep1_dZ_branch;
	bool     lep1_dZ_isLoaded;
	float    lep2_dZ_;
	TBranch *lep2_dZ_branch;
	bool     lep2_dZ_isLoaded;
	float    lep1_d0_err_;
	TBranch *lep1_d0_err_branch;
	bool     lep1_d0_err_isLoaded;
	float    lep2_d0_err_;
	TBranch *lep2_d0_err_branch;
	bool     lep2_d0_err_isLoaded;
	float    lep1_ip3d_;
	TBranch *lep1_ip3d_branch;
	bool     lep1_ip3d_isLoaded;
	float    lep2_ip3d_;
	TBranch *lep2_ip3d_branch;
	bool     lep2_ip3d_isLoaded;
	float    lep1_MVA_;
	TBranch *lep1_MVA_branch;
	bool     lep1_MVA_isLoaded;
	float    lep2_MVA_;
	TBranch *lep2_MVA_branch;
	bool     lep2_MVA_isLoaded;
	float    lep1_MVA_miniaod_;
	TBranch *lep1_MVA_miniaod_branch;
	bool     lep1_MVA_miniaod_isLoaded;
	float    lep2_MVA_miniaod_;
	TBranch *lep2_MVA_miniaod_branch;
	bool     lep2_MVA_miniaod_isLoaded;
	float    lep1_ip3d_err_;
	TBranch *lep1_ip3d_err_branch;
	bool     lep1_ip3d_err_isLoaded;
	float    lep2_ip3d_err_;
	TBranch *lep2_ip3d_err_branch;
	bool     lep2_ip3d_err_isLoaded;
	int      nVetoElectrons7_;
	TBranch *nVetoElectrons7_branch;
	bool     nVetoElectrons7_isLoaded;
	int      nVetoElectrons10_;
	TBranch *nVetoElectrons10_branch;
	bool     nVetoElectrons10_isLoaded;
	int      nVetoElectrons25_;
	TBranch *nVetoElectrons25_branch;
	bool     nVetoElectrons25_isLoaded;
	int      nVetoMuons5_;
	TBranch *nVetoMuons5_branch;
	bool     nVetoMuons5_isLoaded;
	int      nVetoMuons10_;
	TBranch *nVetoMuons10_branch;
	bool     nVetoMuons10_isLoaded;
	int      nVetoMuons25_;
	TBranch *nVetoMuons25_branch;
	bool     nVetoMuons25_isLoaded;
	string *filename_;
	TBranch *filename_branch;
	bool     filename_isLoaded;
	float    lep1_ptrel_v0_;
	TBranch *lep1_ptrel_v0_branch;
	bool     lep1_ptrel_v0_isLoaded;
	float    lep1_ptrel_v1_;
	TBranch *lep1_ptrel_v1_branch;
	bool     lep1_ptrel_v1_isLoaded;
	float    lep2_ptrel_v0_;
	TBranch *lep2_ptrel_v0_branch;
	bool     lep2_ptrel_v0_isLoaded;
	float    lep2_ptrel_v1_;
	TBranch *lep2_ptrel_v1_branch;
	bool     lep2_ptrel_v1_isLoaded;
	float    lep1_miniIso_;
	TBranch *lep1_miniIso_branch;
	bool     lep1_miniIso_isLoaded;
	float    lep2_miniIso_;
	TBranch *lep2_miniIso_branch;
	bool     lep2_miniIso_isLoaded;
	float    lep1_ptratio_;
	TBranch *lep1_ptratio_branch;
	bool     lep1_ptratio_isLoaded;
	float    lep2_ptratio_;
	TBranch *lep2_ptratio_branch;
	bool     lep2_ptratio_isLoaded;
	ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *jet_close_lep1_;
	TBranch *jet_close_lep1_branch;
	bool     jet_close_lep1_isLoaded;
	ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *jet_close_lep2_;
	TBranch *jet_close_lep2_branch;
	bool     jet_close_lep2_isLoaded;
	vector<int> *eleID_kfhits_;
	TBranch *eleID_kfhits_branch;
	bool     eleID_kfhits_isLoaded;
	vector<float> *eleID_oldsigmaietaieta_;
	TBranch *eleID_oldsigmaietaieta_branch;
	bool     eleID_oldsigmaietaieta_isLoaded;
	vector<float> *eleID_oldsigmaiphiiphi_;
	TBranch *eleID_oldsigmaiphiiphi_branch;
	bool     eleID_oldsigmaiphiiphi_isLoaded;
	vector<float> *eleID_oldcircularity_;
	TBranch *eleID_oldcircularity_branch;
	bool     eleID_oldcircularity_isLoaded;
	vector<float> *eleID_oldr9_;
	TBranch *eleID_oldr9_branch;
	bool     eleID_oldr9_isLoaded;
	vector<float> *eleID_scletawidth_;
	TBranch *eleID_scletawidth_branch;
	bool     eleID_scletawidth_isLoaded;
	vector<float> *eleID_sclphiwidth_;
	TBranch *eleID_sclphiwidth_branch;
	bool     eleID_sclphiwidth_isLoaded;
	vector<float> *eleID_he_;
	TBranch *eleID_he_branch;
	bool     eleID_he_isLoaded;
	vector<float> *eleID_psEoverEraw_;
	TBranch *eleID_psEoverEraw_branch;
	bool     eleID_psEoverEraw_isLoaded;
	vector<float> *eleID_kfchi2_;
	TBranch *eleID_kfchi2_branch;
	bool     eleID_kfchi2_isLoaded;
	vector<float> *eleID_chi2_hits_;
	TBranch *eleID_chi2_hits_branch;
	bool     eleID_chi2_hits_isLoaded;
	vector<float> *eleID_fbrem_;
	TBranch *eleID_fbrem_branch;
	bool     eleID_fbrem_isLoaded;
	vector<float> *eleID_ep_;
	TBranch *eleID_ep_branch;
	bool     eleID_ep_isLoaded;
	vector<float> *eleID_eelepout_;
	TBranch *eleID_eelepout_branch;
	bool     eleID_eelepout_isLoaded;
	vector<float> *eleID_IoEmIop_;
	TBranch *eleID_IoEmIop_branch;
	bool     eleID_IoEmIop_isLoaded;
	vector<float> *eleID_deltaetain_;
	TBranch *eleID_deltaetain_branch;
	bool     eleID_deltaetain_isLoaded;
	vector<float> *eleID_deltaphiin_;
	TBranch *eleID_deltaphiin_branch;
	bool     eleID_deltaphiin_isLoaded;
	vector<float> *eleID_deltaetaseed_;
	TBranch *eleID_deltaetaseed_branch;
	bool     eleID_deltaetaseed_isLoaded;
	vector<float> *eleID_pT_;
	TBranch *eleID_pT_branch;
	bool     eleID_pT_isLoaded;
	vector<bool> *eleID_isbarrel_;
	TBranch *eleID_isbarrel_branch;
	bool     eleID_isbarrel_isLoaded;
	vector<bool> *eleID_isendcap_;
	TBranch *eleID_isendcap_branch;
	bool     eleID_isendcap_isLoaded;
	vector<float> *eleID_scl_eta_;
	TBranch *eleID_scl_eta_branch;
	bool     eleID_scl_eta_isLoaded;
	vector<float> *muID_dzPV_;
	TBranch *muID_dzPV_branch;
	bool     muID_dzPV_isLoaded;
	vector<float> *muID_ptSig_;
	TBranch *muID_ptSig_branch;
	bool     muID_ptSig_isLoaded;
	vector<float> *muID_ip3dSig_;
	TBranch *muID_ip3dSig_branch;
	bool     muID_ip3dSig_isLoaded;
	vector<float> *muID_medMuonPOG_;
	TBranch *muID_medMuonPOG_branch;
	bool     muID_medMuonPOG_isLoaded;
	vector<float> *muID_pt_;
	TBranch *muID_pt_branch;
	bool     muID_pt_isLoaded;
	vector<float> *muID_eta_;
	TBranch *muID_eta_branch;
	bool     muID_eta_isLoaded;
	vector<float> *trueNumInt_;
	TBranch *trueNumInt_branch;
	bool     trueNumInt_isLoaded;
	vector<int> *nPUvertices_;
	TBranch *nPUvertices_branch;
	bool     nPUvertices_isLoaded;
	int      nGoodVertices_;
	TBranch *nGoodVertices_branch;
	bool     nGoodVertices_isLoaded;
	bool     lep1_trigMatch_noIsoReq_;
	TBranch *lep1_trigMatch_noIsoReq_branch;
	bool     lep1_trigMatch_noIsoReq_isLoaded;
	bool     lep1_trigMatch_isoReq_;
	TBranch *lep1_trigMatch_isoReq_branch;
	bool     lep1_trigMatch_isoReq_isLoaded;
	bool     lep2_trigMatch_noIsoReq_;
	TBranch *lep2_trigMatch_noIsoReq_branch;
	bool     lep2_trigMatch_noIsoReq_isLoaded;
	bool     lep2_trigMatch_isoReq_;
	TBranch *lep2_trigMatch_isoReq_branch;
	bool     lep2_trigMatch_isoReq_isLoaded;
	float    met3p0_;
	TBranch *met3p0_branch;
	bool     met3p0_isLoaded;
  float weight_;
  TBranch *weight_branch;
  bool weight_isLoaded;
  vector<float> *btags_cdisc_;
  TBranch *btags_cdisc_branch;
  bool btags_cdisc_isLoaded;
  int bdt_nforwardjets20_;
  TBranch *bdt_nforwardjets20_branch;
  bool bdt_nforwardjets20_isLoaded;
  float bdt_avgcdisc_;
  TBranch *bdt_avgcdisc_branch;
  bool bdt_avgcdisc_isLoaded;
  int ntrijets_;
  TBranch *ntrijets_branch;
  bool ntrijets_isLoaded;
  float trijet_njetsnonb_;
  TBranch *trijet_njetsnonb_branch;
  bool trijet_njetsnonb_isLoaded;
  float trijet_njetsb_;
  TBranch *trijet_njetsb_branch;
  bool trijet_njetsb_isLoaded;
  float trijet_meandisc_;
  TBranch *trijet_meandisc_branch;
  bool trijet_meandisc_isLoaded;
  float trijet_leadingdisc_;
  TBranch *trijet_leadingdisc_branch;
  bool trijet_leadingdisc_isLoaded;
  float trijet_subleadingdisc_;
  TBranch *trijet_subleadingdisc_branch;
  bool trijet_subleadingdisc_isLoaded;
  int trijet_numhigh_;
  TBranch *trijet_numhigh_branch;
  bool trijet_numhigh_isLoaded;
  float trijet_frachigh_;
  TBranch *trijet_frachigh_branch;
  bool trijet_frachigh_isLoaded;
  float prefire2017_sfdown_;
  TBranch *prefire2017_sfdown_branch;
  bool prefire2017_sfdown_isLoaded;
  float prefire2017_sfup_;
  TBranch *prefire2017_sfup_branch;
  bool prefire2017_sfup_isLoaded;
  float prefire2017_sf_;
  TBranch *prefire2017_sf_branch;
  bool prefire2017_sf_isLoaded;
  float prefire2016_sfdown_;
  TBranch *prefire2016_sfdown_branch;
  bool prefire2016_sfdown_isLoaded;
  float prefire2016_sfup_;
  TBranch *prefire2016_sfup_branch;
  bool prefire2016_sfup_isLoaded;
  float prefire2016_sf_;
  TBranch *prefire2016_sf_branch;
  bool prefire2016_sf_isLoaded;
  bool passfilter_;
  TBranch *passfilter_branch;
  bool passfilter_isLoaded;
  float lep4_coneCorrPt_;
  TBranch *lep4_coneCorrPt_branch;
  bool lep4_coneCorrPt_isLoaded;
  float bdt_jec_up_nbtags_;
  TBranch *bdt_jec_up_nbtags_branch;
  bool bdt_jec_up_nbtags_isLoaded;
  float bdt_jec_dn_nbtags_;
  TBranch *bdt_jec_dn_nbtags_branch;
  bool bdt_jec_dn_nbtags_isLoaded;
  float bdt_jer_up_nbtags_;
  TBranch *bdt_jer_up_nbtags_branch;
  bool bdt_jer_up_nbtags_isLoaded;
  float bdt_jer_dn_nbtags_;
  TBranch *bdt_jer_dn_nbtags_branch;
  bool bdt_jer_dn_nbtags_isLoaded;
  float bdt_jec_up_njets_;
  TBranch *bdt_jec_up_njets_branch;
  bool bdt_jec_up_njets_isLoaded;
  float bdt_jec_dn_njets_;
  TBranch *bdt_jec_dn_njets_branch;
  bool bdt_jec_dn_njets_isLoaded;
  float bdt_jer_up_njets_;
  TBranch *bdt_jer_up_njets_branch;
  bool bdt_jer_up_njets_isLoaded;
  float bdt_jer_dn_njets_;
  TBranch *bdt_jer_dn_njets_branch;
  bool bdt_jer_dn_njets_isLoaded;
  float bdt_jec_up_met_;
  TBranch *bdt_jec_up_met_branch;
  bool bdt_jec_up_met_isLoaded;
  float bdt_jec_dn_met_;
  TBranch *bdt_jec_dn_met_branch;
  bool bdt_jec_dn_met_isLoaded;
  float bdt_jer_up_met_;
  TBranch *bdt_jer_up_met_branch;
  bool bdt_jer_up_met_isLoaded;
  float bdt_jer_dn_met_;
  TBranch *bdt_jer_dn_met_branch;
  bool bdt_jer_dn_met_isLoaded;
  float bdt_jec_up_htb_;
  TBranch *bdt_jec_up_htb_branch;
  bool bdt_jec_up_htb_isLoaded;
  float bdt_jec_dn_htb_;
  TBranch *bdt_jec_dn_htb_branch;
  bool bdt_jec_dn_htb_isLoaded;
  float bdt_jer_up_htb_;
  TBranch *bdt_jer_up_htb_branch;
  bool bdt_jer_up_htb_isLoaded;
  float bdt_jer_dn_htb_;
  TBranch *bdt_jer_dn_htb_branch;
  bool bdt_jer_dn_htb_isLoaded;
  float bdt_jec_up_nlb40_;
  TBranch *bdt_jec_up_nlb40_branch;
  bool bdt_jec_up_nlb40_isLoaded;
  float bdt_jec_dn_nlb40_;
  TBranch *bdt_jec_dn_nlb40_branch;
  bool bdt_jec_dn_nlb40_isLoaded;
  float bdt_jer_up_nlb40_;
  TBranch *bdt_jer_up_nlb40_branch;
  bool bdt_jer_up_nlb40_isLoaded;
  float bdt_jer_dn_nlb40_;
  TBranch *bdt_jer_dn_nlb40_branch;
  bool bdt_jer_dn_nlb40_isLoaded;
  float bdt_jec_up_ntb40_;
  TBranch *bdt_jec_up_ntb40_branch;
  bool bdt_jec_up_ntb40_isLoaded;
  float bdt_jec_dn_ntb40_;
  TBranch *bdt_jec_dn_ntb40_branch;
  bool bdt_jec_dn_ntb40_isLoaded;
  float bdt_jer_up_ntb40_;
  TBranch *bdt_jer_up_ntb40_branch;
  bool bdt_jer_up_ntb40_isLoaded;
  float bdt_jer_dn_ntb40_;
  TBranch *bdt_jer_dn_ntb40_branch;
  bool bdt_jer_dn_ntb40_isLoaded;
  float bdt_disc_;
  TBranch *bdt_disc_branch;
  bool bdt_disc_isLoaded;
  float bdt_disc_jec_up_;
  TBranch *bdt_disc_jec_up_branch;
  bool bdt_disc_jec_up_isLoaded;
  float bdt_disc_jer_up_;
  TBranch *bdt_disc_jer_up_branch;
  bool bdt_disc_jer_up_isLoaded;
  float bdt_disc_jec_dn_;
  TBranch *bdt_disc_jec_dn_branch;
  bool bdt_disc_jec_dn_isLoaded;
  float bdt_disc_jer_dn_;
  TBranch *bdt_disc_jer_dn_branch;
  bool bdt_disc_jer_dn_isLoaded;
  float bdt_nbtags_;
  TBranch *bdt_nbtags_branch;
  bool bdt_nbtags_isLoaded;
  float bdt_njets_;
  TBranch *bdt_njets_branch;
  bool bdt_njets_isLoaded;
  float bdt_met_;
  TBranch *bdt_met_branch;
  bool bdt_met_isLoaded;
  float bdt_ptl2_;
  TBranch *bdt_ptl2_branch;
  bool bdt_ptl2_isLoaded;
  float bdt_nlb40_;
  TBranch *bdt_nlb40_branch;
  bool bdt_nlb40_isLoaded;
  float bdt_ntb40_;
  TBranch *bdt_ntb40_branch;
  bool bdt_ntb40_isLoaded;
  float bdt_nleps_;
  TBranch *bdt_nleps_branch;
  bool bdt_nleps_isLoaded;
  float bdt_htb_;
  TBranch *bdt_htb_branch;
  bool bdt_htb_isLoaded;
  float bdt_ml1j1_;
  TBranch *bdt_ml1j1_branch;
  bool bdt_ml1j1_isLoaded;
  float bdt_dphil1l2_;
  TBranch *bdt_dphil1l2_branch;
  bool bdt_dphil1l2_isLoaded;
  float bdt_maxmjoverpt_;
  TBranch *bdt_maxmjoverpt_branch;
  bool bdt_maxmjoverpt_isLoaded;
  float bdt_detal1l2_;
  TBranch *bdt_detal1l2_branch;
  bool bdt_detal1l2_isLoaded;
  float bdt_q1_;
  TBranch *bdt_q1_branch;
  bool bdt_q1_isLoaded;
  float bdt_ptj1_;
  TBranch *bdt_ptj1_branch;
  bool bdt_ptj1_isLoaded;
  float bdt_ptj6_;
  TBranch *bdt_ptj6_branch;
  bool bdt_ptj6_isLoaded;
  float bdt_ptj7_;
  TBranch *bdt_ptj7_branch;
  bool bdt_ptj7_isLoaded;
  float bdt_ptj8_;
  TBranch *bdt_ptj8_branch;
  bool bdt_ptj8_isLoaded;
  float bdt_ptl1_;
  TBranch *bdt_ptl1_branch;
  bool bdt_ptl1_isLoaded;
  float bdt_ptl3_;
  TBranch *bdt_ptl3_branch;
  bool bdt_ptl3_isLoaded;
	vector<float> *jet_pt_;
	TBranch *jet_pt_branch;
	bool     jet_pt_isLoaded;
	float    metphi3p0_;
	TBranch *metphi3p0_branch;
	bool     metphi3p0_isLoaded;
	bool     passes_met_filters_;
	TBranch *passes_met_filters_branch;
	bool     passes_met_filters_isLoaded;
	bool     failsRA2Filter_;
	TBranch *failsRA2Filter_branch;
	bool     failsRA2Filter_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *mostJets_;
	TBranch *mostJets_branch;
	bool     mostJets_isLoaded;
	bool     madeExtraZ_;
	TBranch *madeExtraZ_branch;
	bool     madeExtraZ_isLoaded;
	bool     madeExtraG_;
	TBranch *madeExtraG_branch;
	bool     madeExtraG_isLoaded;
	int      lep3_mcid_;
	TBranch *lep3_mcid_branch;
	bool     lep3_mcid_isLoaded;
	int      lep3_mcidx_;
	TBranch *lep3_mcidx_branch;
	bool     lep3_mcidx_isLoaded;
	int      lep4_mcid_;
	TBranch *lep4_mcid_branch;
	bool     lep4_mcid_isLoaded;
	int      lep4_mcidx_;
	TBranch *lep4_mcidx_branch;
	bool     lep4_mcidx_isLoaded;
	vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *mostJets_rawp4_;
	TBranch *mostJets_rawp4_branch;
	bool     mostJets_rawp4_isLoaded;
	vector<float> *mostJets_disc_;
	TBranch *mostJets_disc_branch;
	bool     mostJets_disc_isLoaded;
	vector<float> *mostJets_unc_;
	TBranch *mostJets_unc_branch;
	bool     mostJets_unc_isLoaded;
	vector<float> *mostJets_JEC_;
	TBranch *mostJets_JEC_branch;
	bool     mostJets_JEC_isLoaded;
	vector<float> *mostJets_undoJEC_;
	TBranch *mostJets_undoJEC_branch;
	bool     mostJets_undoJEC_isLoaded;
	vector<bool> *mostJets_passID_;
	TBranch *mostJets_passID_branch;
	bool     mostJets_passID_isLoaded;
	vector<bool> *mostJets_passCleaning_;
	TBranch *mostJets_passCleaning_branch;
	bool     mostJets_passCleaning_isLoaded;
	int      njets_unc_up_;
	TBranch *njets_unc_up_branch;
	bool     njets_unc_up_isLoaded;
	int      njets_unc_dn_;
	TBranch *njets_unc_dn_branch;
	bool     njets_unc_dn_isLoaded;
	float    ht_unc_up_;
	TBranch *ht_unc_up_branch;
	bool     ht_unc_up_isLoaded;
	float    ht_unc_dn_;
	TBranch *ht_unc_dn_branch;
	bool     ht_unc_dn_isLoaded;
	int      nbtags_unc_up_;
	TBranch *nbtags_unc_up_branch;
	bool     nbtags_unc_up_isLoaded;
	int      nbtags_unc_dn_;
	TBranch *nbtags_unc_dn_branch;
	bool     nbtags_unc_dn_isLoaded;
	float    met_unc_up_;
	TBranch *met_unc_up_branch;
	bool     met_unc_up_isLoaded;
	float    met_unc_dn_;
	TBranch *met_unc_dn_branch;
	bool     met_unc_dn_isLoaded;
	float    metPhi_unc_up_;
	TBranch *metPhi_unc_up_branch;
	bool     metPhi_unc_up_isLoaded;
	float    metPhi_unc_dn_;
	TBranch *metPhi_unc_dn_branch;
	bool     metPhi_unc_dn_isLoaded;
	int      njets_JER_up_;
	TBranch *njets_JER_up_branch;
	bool     njets_JER_up_isLoaded;
	int      njets_JER_dn_;
	TBranch *njets_JER_dn_branch;
	bool     njets_JER_dn_isLoaded;
	float    ht_JER_up_;
	TBranch *ht_JER_up_branch;
	bool     ht_JER_up_isLoaded;
	float    ht_JER_dn_;
	TBranch *ht_JER_dn_branch;
	bool     ht_JER_dn_isLoaded;
	int      nbtags_JER_up_;
	TBranch *nbtags_JER_up_branch;
	bool     nbtags_JER_up_isLoaded;
	int      nbtags_JER_dn_;
	TBranch *nbtags_JER_dn_branch;
	bool     nbtags_JER_dn_isLoaded;
	float    met_JER_up_;
	TBranch *met_JER_up_branch;
	bool     met_JER_up_isLoaded;
	float    met_JER_dn_;
	TBranch *met_JER_dn_branch;
	bool     met_JER_dn_isLoaded;
	float    metPhi_JER_up_;
	TBranch *metPhi_JER_up_branch;
	bool     metPhi_JER_up_isLoaded;
	float    metPhi_JER_dn_;
	TBranch *metPhi_JER_dn_branch;
	bool     metPhi_JER_dn_isLoaded;
	bool     passedFilterList_;
	TBranch *passedFilterList_branch;
	bool     passedFilterList_isLoaded;
	bool     lep2_genps_isHardProcess_;
	TBranch *lep2_genps_isHardProcess_branch;
	bool     lep2_genps_isHardProcess_isLoaded;
	bool     lep2_genps_fromHardProcessFinalState_;
	TBranch *lep2_genps_fromHardProcessFinalState_branch;
	bool     lep2_genps_fromHardProcessFinalState_isLoaded;
	bool     lep2_genps_fromHardProcessDecayed_;
	TBranch *lep2_genps_fromHardProcessDecayed_branch;
	bool     lep2_genps_fromHardProcessDecayed_isLoaded;
	bool     lep2_genps_isDirectHardProcessTauDecayProductFinalState_;
	TBranch *lep2_genps_isDirectHardProcessTauDecayProductFinalState_branch;
	bool     lep2_genps_isDirectHardProcessTauDecayProductFinalState_isLoaded;
	bool     lep2_genps_fromHardProcessBeforeFSR_;
	TBranch *lep2_genps_fromHardProcessBeforeFSR_branch;
	bool     lep2_genps_fromHardProcessBeforeFSR_isLoaded;
	bool     lep2_genps_isLastCopy_;
	TBranch *lep2_genps_isLastCopy_branch;
	bool     lep2_genps_isLastCopy_isLoaded;
	bool     lep2_genps_isLastCopyBeforeFSR_;
	TBranch *lep2_genps_isLastCopyBeforeFSR_branch;
	bool     lep2_genps_isLastCopyBeforeFSR_isLoaded;
	bool     lep1_genps_isHardProcess_;
	TBranch *lep1_genps_isHardProcess_branch;
	bool     lep1_genps_isHardProcess_isLoaded;
	bool     lep1_genps_fromHardProcessFinalState_;
	TBranch *lep1_genps_fromHardProcessFinalState_branch;
	bool     lep1_genps_fromHardProcessFinalState_isLoaded;
	bool     lep1_genps_fromHardProcessDecayed_;
	TBranch *lep1_genps_fromHardProcessDecayed_branch;
	bool     lep1_genps_fromHardProcessDecayed_isLoaded;
	bool     lep1_genps_isDirectHardProcessTauDecayProductFinalState_;
	TBranch *lep1_genps_isDirectHardProcessTauDecayProductFinalState_branch;
	bool     lep1_genps_isDirectHardProcessTauDecayProductFinalState_isLoaded;
	bool     lep1_genps_fromHardProcessBeforeFSR_;
	TBranch *lep1_genps_fromHardProcessBeforeFSR_branch;
	bool     lep1_genps_fromHardProcessBeforeFSR_isLoaded;
	bool     lep1_genps_isLastCopy_;
	TBranch *lep1_genps_isLastCopy_branch;
	bool     lep1_genps_isLastCopy_isLoaded;
	bool     lep1_genps_isLastCopyBeforeFSR_;
	TBranch *lep1_genps_isLastCopyBeforeFSR_branch;
	bool     lep1_genps_isLastCopyBeforeFSR_isLoaded;
	int      lep1_mc3idx_;
	TBranch *lep1_mc3idx_branch;
	bool     lep1_mc3idx_isLoaded;
	int      lep2_mc3idx_;
	TBranch *lep2_mc3idx_branch;
	bool     lep2_mc3idx_isLoaded;
	bool     lep1_el_conv_vtx_flag_;
	TBranch *lep1_el_conv_vtx_flag_branch;
	bool     lep1_el_conv_vtx_flag_isLoaded;
	bool     lep2_el_conv_vtx_flag_;
	TBranch *lep2_el_conv_vtx_flag_branch;
	bool     lep2_el_conv_vtx_flag_isLoaded;
	int     lep1_el_exp_innerlayers_;
	TBranch *lep1_el_exp_innerlayers_branch;
	bool     lep1_el_exp_innerlayers_isLoaded;
	bool     lep1_mu_ptErr_;
	TBranch *lep1_mu_ptErr_branch;
	bool     lep1_mu_ptErr_isLoaded;
	bool     lep2_mu_ptErr_;
	TBranch *lep2_mu_ptErr_branch;
	bool     lep2_mu_ptErr_isLoaded;
	bool     lep1_el_threeChargeAgree_;
	TBranch *lep1_el_threeChargeAgree_branch;
	bool     lep1_el_threeChargeAgree_isLoaded;
	bool     lep2_el_threeChargeAgree_;
	TBranch *lep2_el_threeChargeAgree_branch;
	bool     lep2_el_threeChargeAgree_isLoaded;
	int     lep2_el_exp_innerlayers_;
	TBranch *lep2_el_exp_innerlayers_branch;
	bool     lep2_el_exp_innerlayers_isLoaded;
	bool     lep1_nPixelMiss_;
	TBranch *lep1_nPixelMiss_branch;
	bool     lep1_nPixelMiss_isLoaded;
	bool     lep2_nPixelMiss_;
	TBranch *lep2_nPixelMiss_branch;
	bool     lep2_nPixelMiss_isLoaded;
	bool     lep1_tightCharge_;
	TBranch *lep1_tightCharge_branch;
	bool     lep1_tightCharge_isLoaded;
	bool     lep2_tightCharge_;
	TBranch *lep2_tightCharge_branch;
	bool     lep2_tightCharge_isLoaded;
	bool     is_fastsim_;
	TBranch *is_fastsim_branch;
	bool     is_fastsim_isLoaded;
	bool     lep1_isGoodLeg_;
	TBranch *lep1_isGoodLeg_branch;
	bool     lep1_isGoodLeg_isLoaded;
	bool     lep2_isGoodLeg_;
	TBranch *lep2_isGoodLeg_branch;
	bool     lep2_isGoodLeg_isLoaded;
	bool     lep1_isFakeLeg_;
	TBranch *lep1_isFakeLeg_branch;
	bool     lep1_isFakeLeg_isLoaded;
	bool     lep2_isFakeLeg_;
	TBranch *lep2_isFakeLeg_branch;
	bool     lep2_isFakeLeg_isLoaded;
	bool     lep1_multiIso_;
	TBranch *lep1_multiIso_branch;
	bool     lep1_multiIso_isLoaded;
	bool     lep2_multiIso_;
	TBranch *lep2_multiIso_branch;
	bool     lep2_multiIso_isLoaded;
	float    lep1_sip_;
	TBranch *lep1_sip_branch;
	bool     lep1_sip_isLoaded;
	float    lep2_sip_;
	TBranch *lep2_sip_branch;
	bool     lep2_sip_isLoaded;
	ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *lep1_closeJet_;
	TBranch *lep1_closeJet_branch;
	bool     lep1_closeJet_isLoaded;
	ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *lep2_closeJet_;
	TBranch *lep2_closeJet_branch;
	bool     lep2_closeJet_isLoaded;
	bool     passed_id_inSituFR_lep1_;
	TBranch *passed_id_inSituFR_lep1_branch;
	bool     passed_id_inSituFR_lep1_isLoaded;
	bool     passed_id_inSituFR_lep2_;
	TBranch *passed_id_inSituFR_lep2_branch;
	bool     passed_id_inSituFR_lep2_isLoaded;
	bool     fired_trigger_;
	TBranch *fired_trigger_branch;
	bool     fired_trigger_isLoaded;
  bool fired_trigger_ss_;
  TBranch *fired_trigger_ss_branch;
  bool fired_trigger_ss_isLoaded;
	unsigned int triggers_;
	TBranch *triggers_branch;
	bool     triggers_isLoaded;
	unsigned int triggers1lep_;
	TBranch *triggers1lep_branch;
	bool     triggers1lep_isLoaded;
	float    weight_btagsf_;
	TBranch *weight_btagsf_branch;
	bool     weight_btagsf_isLoaded;
	float    weight_btagsf_UP_;
	TBranch *weight_btagsf_UP_branch;
	bool     weight_btagsf_UP_isLoaded;
	float    weight_btagsf_DN_;
	TBranch *weight_btagsf_DN_branch;
	bool     weight_btagsf_DN_isLoaded;
  int nhiggs_;
  TBranch *nhiggs_branch;
  bool nhiggs_isLoaded;
  float prefire_sf_;
  TBranch *prefire_sf_branch;
  bool prefire_sf_isLoaded;
  float prefire_sfdown_;
  TBranch *prefire_sfdown_branch;
  bool prefire_sfdown_isLoaded;
  float prefire_sfup_;
  TBranch *prefire_sfup_branch;
  bool prefire_sfup_isLoaded;
  float weight_btagsf_heavy_UP_;
  TBranch *weight_btagsf_heavy_UP_branch;
  bool weight_btagsf_heavy_UP_isLoaded;
  float weight_btagsf_heavy_DN_;
  TBranch *weight_btagsf_heavy_DN_branch;
  bool weight_btagsf_heavy_DN_isLoaded;
  float weight_btagsf_light_UP_;
  TBranch *weight_btagsf_light_UP_branch;
  bool weight_btagsf_light_UP_isLoaded;
  float weight_btagsf_light_DN_;
  TBranch *weight_btagsf_light_DN_branch;
  bool weight_btagsf_light_DN_isLoaded;
	float    weight_scale_UP_;
	TBranch *weight_scale_UP_branch;
	bool     weight_scale_UP_isLoaded;
	float    weight_scale_DN_;
	TBranch *weight_scale_DN_branch;
	bool     weight_scale_DN_isLoaded;
	float    weight_fsrvar_UP_;
	TBranch *weight_fsrvar_UP_branch;
	bool     weight_fsrvar_UP_isLoaded;
	float    weight_fsrvar_DN_;
	TBranch *weight_fsrvar_DN_branch;
	bool     weight_fsrvar_DN_isLoaded;
	float    weight_isrvar_UP_;
	TBranch *weight_isrvar_UP_branch;
	bool     weight_isrvar_UP_isLoaded;
	float    weight_isrvar_DN_;
	TBranch *weight_isrvar_DN_branch;
	bool     weight_isrvar_DN_isLoaded;
	float    weight_alphas_UP_;
	TBranch *weight_alphas_UP_branch;
	bool     weight_alphas_UP_isLoaded;
	float    weight_alphas_DN_;
	TBranch *weight_alphas_DN_branch;
	bool     weight_alphas_DN_isLoaded;
	float    weight_pdf_UP_;
	TBranch *weight_pdf_UP_branch;
	bool     weight_pdf_UP_isLoaded;
	float    weight_pdf_DN_;
	TBranch *weight_pdf_DN_branch;
	bool     weight_pdf_DN_isLoaded;
	ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *gl1_p4_;
	TBranch *gl1_p4_branch;
	bool     gl1_p4_isLoaded;
	ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *gl2_p4_;
	TBranch *gl2_p4_branch;
	bool     gl2_p4_isLoaded;
	float    decayWSF_;
	TBranch *decayWSF_branch;
	bool     decayWSF_isLoaded;
	float    isr_unc_;
	TBranch *isr_unc_branch;
	bool     isr_unc_isLoaded;
	int      nisrMatch_;
	TBranch *nisrMatch_branch;
	bool     nisrMatch_isLoaded;
	int      nhadronicW_;
	TBranch *nhadronicW_branch;
	bool     nhadronicW_isLoaded;
	int      extragenb_;
	TBranch *extragenb_branch;
	bool     extragenb_isLoaded;
	float    weight_isr_;
	TBranch *weight_isr_branch;
	bool     weight_isr_isLoaded;
	float    weight_isr_UP_;
	TBranch *weight_isr_UP_branch;
	bool     weight_isr_UP_isLoaded;
	float    weight_isr_tt_;
	TBranch *weight_isr_tt_branch;
	bool     weight_isr_tt_isLoaded;
	float    weight_isr_dy_;
	TBranch *weight_isr_dy_branch;
	bool     weight_isr_dy_isLoaded;
	float    weight_isr_DN_;
	TBranch *weight_isr_DN_branch;
	bool     weight_isr_DN_isLoaded;
	bool     lep3_el_etaSC_;
	TBranch *lep3_el_etaSC_branch;
	bool     lep3_el_etaSC_isLoaded;
	bool     lep3_el_conv_vtx_flag_;
	TBranch *lep3_el_conv_vtx_flag_branch;
	bool     lep3_el_conv_vtx_flag_isLoaded;
	bool     lep3_el_exp_innerlayers_;
	TBranch *lep3_el_exp_innerlayers_branch;
	bool     lep3_el_exp_innerlayers_isLoaded;
	bool     lep3_el_threeChargeAgree_;
	TBranch *lep3_el_threeChargeAgree_branch;
	bool     lep3_el_threeChargeAgree_isLoaded;
	bool     lep3_el_dxyPV_;
	TBranch *lep3_el_dxyPV_branch;
	bool     lep3_el_dxyPV_isLoaded;
	bool     lep3_el_ip3d_;
	TBranch *lep3_el_ip3d_branch;
	bool     lep3_el_ip3d_isLoaded;
	bool     lep3_el_dzPV_;
	TBranch *lep3_el_dzPV_branch;
	bool     lep3_el_dzPV_isLoaded;
	float    lep3_el_MVA_value_;
	TBranch *lep3_el_MVA_value_branch;
	bool     lep3_el_MVA_value_isLoaded;
	bool     lep3_el_MVA_;
	TBranch *lep3_el_MVA_branch;
	bool     lep3_el_MVA_isLoaded;
	bool     lep3_iso_RA5_;
	TBranch *lep3_iso_RA5_branch;
	bool     lep3_iso_RA5_isLoaded;
	bool     lep3_iso_RA7_;
	TBranch *lep3_iso_RA7_branch;
	bool     lep3_iso_RA7_isLoaded;
	bool     lep3_passes_RA5_;
	TBranch *lep3_passes_RA5_branch;
	bool     lep3_passes_RA5_isLoaded;
	bool     lep3_passes_RA7_;
	TBranch *lep3_passes_RA7_branch;
	bool     lep3_passes_RA7_isLoaded;
	bool     lep3_passes_RA7v2_;
	TBranch *lep3_passes_RA7v2_branch;
	bool     lep3_passes_RA7v2_isLoaded;
	bool     lep3_mu_dxyPV_;
	TBranch *lep3_mu_dxyPV_branch;
	bool     lep3_mu_dxyPV_isLoaded;
	bool     lep3_mu_ip3d_;
	TBranch *lep3_mu_ip3d_branch;
	bool     lep3_mu_ip3d_isLoaded;
	bool     lep3_mu_dzPV_;
	TBranch *lep3_mu_dzPV_branch;
	bool     lep3_mu_dzPV_isLoaded;
	bool     lep3_mu_ptErr_;
	TBranch *lep3_mu_ptErr_branch;
	bool     lep3_mu_ptErr_isLoaded;
	bool     lep4_el_etaSC_;
	TBranch *lep4_el_etaSC_branch;
	bool     lep4_el_etaSC_isLoaded;
	bool     lep4_el_conv_vtx_flag_;
	TBranch *lep4_el_conv_vtx_flag_branch;
	bool     lep4_el_conv_vtx_flag_isLoaded;
	bool     lep4_el_exp_innerlayers_;
	TBranch *lep4_el_exp_innerlayers_branch;
	bool     lep4_el_exp_innerlayers_isLoaded;
	bool     lep4_el_threeChargeAgree_;
	TBranch *lep4_el_threeChargeAgree_branch;
	bool     lep4_el_threeChargeAgree_isLoaded;
	bool     lep4_el_dxyPV_;
	TBranch *lep4_el_dxyPV_branch;
	bool     lep4_el_dxyPV_isLoaded;
	bool     lep4_el_ip3d_;
	TBranch *lep4_el_ip3d_branch;
	bool     lep4_el_ip3d_isLoaded;
	bool     lep4_el_dzPV_;
	TBranch *lep4_el_dzPV_branch;
	bool     lep4_el_dzPV_isLoaded;
	float    lep4_el_MVA_value_;
	TBranch *lep4_el_MVA_value_branch;
	bool     lep4_el_MVA_value_isLoaded;
	bool     lep4_el_MVA_;
	TBranch *lep4_el_MVA_branch;
	bool     lep4_el_MVA_isLoaded;
	bool     lep4_iso_RA5_;
	TBranch *lep4_iso_RA5_branch;
	bool     lep4_iso_RA5_isLoaded;
	bool     lep4_iso_RA7_;
	TBranch *lep4_iso_RA7_branch;
	bool     lep4_iso_RA7_isLoaded;
	bool     lep4_passes_RA5_;
	TBranch *lep4_passes_RA5_branch;
	bool     lep4_passes_RA5_isLoaded;
	bool     lep4_passes_RA7_;
	TBranch *lep4_passes_RA7_branch;
	bool     lep4_passes_RA7_isLoaded;
	bool     lep4_mu_dxyPV_;
	TBranch *lep4_mu_dxyPV_branch;
	bool     lep4_mu_dxyPV_isLoaded;
	bool     lep4_mu_ip3d_;
	TBranch *lep4_mu_ip3d_branch;
	bool     lep4_mu_ip3d_isLoaded;
	bool     lep4_mu_dzPV_;
	TBranch *lep4_mu_dzPV_branch;
	bool     lep4_mu_dzPV_isLoaded;
	bool     lep4_mu_ptErr_;
	TBranch *lep4_mu_ptErr_branch;
	bool     lep4_mu_ptErr_isLoaded;
	bool     lep3_isTrigSafeNoIsov1_;
	TBranch *lep3_isTrigSafeNoIsov1_branch;
	bool     lep3_isTrigSafeNoIsov1_isLoaded;
	bool     lep1_isTrigSafev1_;
	TBranch *lep1_isTrigSafev1_branch;
	bool     lep1_isTrigSafev1_isLoaded;
	bool     lep4_isTrigSafeNoIsov1_;
	TBranch *lep4_isTrigSafeNoIsov1_branch;
	bool     lep4_isTrigSafeNoIsov1_isLoaded;
	bool     lep2_isTrigSafev1_;
	TBranch *lep2_isTrigSafev1_branch;
	bool     lep2_isTrigSafev1_isLoaded;
	bool     skim_;
	TBranch *skim_branch;
	bool     skim_isLoaded;
public: 
void Init(TTree *tree);
void GetEntry(unsigned int idx); 
void LoadAllBranches(); 
	const bool &lep1_isPrompt();
	const bool &lep1_isDirectPrompt();
	const bool &lep1_isStat3();
	const bool &lep2_isPrompt();
	const bool &lep2_isDirectPrompt();
	const bool &lep2_isStat3();
	const float &met();
	const float &modmet();
	const int &filenumber();
	const float &metPhi();
	const float &rawmet();
	const float &calomet();
	const float &rawmetPhi();
	const float &modmetPhi();
	const unsigned long long &event();
	const int &lumi();
	const int &run();
	const bool &filt_csc();
	const bool &filt_hbhe();
	const bool &filt_hcallaser();
	const bool &filt_ecaltp();
	const bool &filt_trkfail();
	const bool &is_real_data();
	const float &scale1fb();
	const float &xsec();
	const float &xsec_ps();
	const vector<TString> &sparmNames();
	const vector<float> &sparms();
	const float &xsec_error();
	const float &kfactor();
	const float &gen_met();
	const vector<float> &genweights();
	const vector<string> &genweightsID();
	const float &gen_met_phi();
	const int &njets();
	const int &njets_raw();
	const int &hyp_class();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &lep1_p4();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &lep2_p4();
	const float &ht_raw();
	const float &ht();
	const int &lep1_motherID();
	const int &lep2_motherID();
	const int &lep3_motherID();
	const int &lep1_mc_id();
	const int &lep2_mc_id();
	const int &lep1_id();
	const int &lep2_id();
	const float &lep1_coneCorrPt();
	const float &lep2_coneCorrPt();
	const float &lep3_coneCorrPt();
	const int &lep1_idx();
	const int &lep2_idx();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &jets();
	const vector<float> &btags_disc();
	const vector<float> &btags_disc_mva();
	const vector<float> &btags_disc_ivf();
	const vector<float> &jets_disc();
	const vector<float> &jets_disc_mva();
	const vector<float> &jets_disc_csv();
	const vector<float> &jets_JEC();
	const vector<float> &btags_JEC();
	const vector<float> &jets_undoJEC();
	const vector<float> &btags_undoJEC();
	const vector<float> &btags_unc();
	const vector<float> &jets_unc();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &btags();
	const int &nbtags();
	const int &ncharginos();
	const int &higgs_mass();
	const int &nbtags_raw();
	const float &sf_dilepTrig_hpt();
	const float &sf_dilepTrig_lpt();
	const float &sf_dilepTrig_vlpt();
	const int &hyp_type();
	const float &sf_dilep_eff();
	const float &mt();
	const float &mt_l2();
	const float &mt2();
	const float &mtmin();
	const int &lep1_id_gen();
	const int &lep2_id_gen();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &lep1_p4_gen();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &lep2_p4_gen();
	const int &lep3_id();
	const int &lep3_idx();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &lep3_p4();
	const int &lep3_quality();
	const int &lep4_id();
	const int &lep4_idx();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &lep4_p4();
	const float &lep1_iso();
	const float &lep2_iso();
	const float &lep1_tkIso();
	const float &lep2_tkIso();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &dilep_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genps_p4();
	const vector<int> &genps_id();
	const vector<int> &genps_id_mother();
	const vector<int> &genps_idx_mother();
	const vector<int> &genps_status();
	const vector<int> &jets_flavor();
	const vector<int> &btags_flavor();
	const vector<int> &genps_id_grandma();
	const bool &lep1_passes_id();
	const bool &lep2_passes_id();
	const bool &lep3_passes_id();
	const bool &lep4_passes_id();
	const bool &lep1_tight();
	const bool &lep1_veto();
	const bool &lep1_fo();
	const bool &lep2_tight();
	const bool &lep2_veto();
	const bool &lep2_fo();
	const bool &lep3_tight();
	const bool &lep3_veto();
	const bool &lep3_fo();
	const bool &lep4_tight();
	const bool &lep4_veto();
	const bool &lep4_fo();
	const float &lep1_dxyPV();
	const float &lep2_dxyPV();
	const float &lep1_dZ();
	const float &lep2_dZ();
	const float &lep1_d0_err();
	const float &lep2_d0_err();
	const float &lep1_ip3d();
	const float &lep2_ip3d();
	const float &lep1_MVA();
	const float &lep2_MVA();
	const float &lep1_MVA_miniaod();
	const float &lep2_MVA_miniaod();
	const float &lep1_ip3d_err();
	const float &lep2_ip3d_err();
	const int &nVetoElectrons7();
	const int &nVetoElectrons10();
	const int &nVetoElectrons25();
	const int &nVetoMuons5();
	const int &nVetoMuons10();
	const int &nVetoMuons25();
	const string &filename();
	const float &lep1_ptrel_v0();
	const float &lep1_ptrel_v1();
	const float &lep2_ptrel_v0();
	const float &lep2_ptrel_v1();
	const float &lep1_miniIso();
	const float &lep2_miniIso();
	const float &lep1_ptratio();
	const float &lep2_ptratio();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &jet_close_lep1();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &jet_close_lep2();
	const vector<int> &eleID_kfhits();
	const vector<float> &eleID_oldsigmaietaieta();
	const vector<float> &eleID_oldsigmaiphiiphi();
	const vector<float> &eleID_oldcircularity();
	const vector<float> &eleID_oldr9();
	const vector<float> &eleID_scletawidth();
	const vector<float> &eleID_sclphiwidth();
	const vector<float> &eleID_he();
	const vector<float> &eleID_psEoverEraw();
	const vector<float> &eleID_kfchi2();
	const vector<float> &eleID_chi2_hits();
	const vector<float> &eleID_fbrem();
	const vector<float> &eleID_ep();
	const vector<float> &eleID_eelepout();
	const vector<float> &eleID_IoEmIop();
	const vector<float> &eleID_deltaetain();
	const vector<float> &eleID_deltaphiin();
	const vector<float> &eleID_deltaetaseed();
	const vector<float> &eleID_pT();
	const vector<bool> &eleID_isbarrel();
	const vector<bool> &eleID_isendcap();
	const vector<float> &eleID_scl_eta();
	const vector<float> &muID_dzPV();
	const vector<float> &muID_ptSig();
	const vector<float> &muID_ip3dSig();
	const vector<float> &muID_medMuonPOG();
	const vector<float> &muID_pt();
	const vector<float> &muID_eta();
	const vector<float> &trueNumInt();
	const vector<int> &nPUvertices();
	const int &nGoodVertices();
	const bool &lep1_trigMatch_noIsoReq();
	const bool &lep1_trigMatch_isoReq();
	const bool &lep2_trigMatch_noIsoReq();
	const bool &lep2_trigMatch_isoReq();
	const float &met3p0();
  const float &weight();
  const vector<float> &btags_cdisc();
  const int &bdt_nforwardjets20();
  const float &bdt_avgcdisc();
  const int &ntrijets();
  const float &trijet_njetsnonb();
  const float &trijet_njetsb();
  const float &trijet_meandisc();
  const float &trijet_leadingdisc();
  const float &trijet_subleadingdisc();
  const int &trijet_numhigh();
  const float &trijet_frachigh();
  const float &prefire2017_sfdown();
  const float &prefire2017_sfup();
  const float &prefire2017_sf();
  const float &prefire2016_sfdown();
  const float &prefire2016_sfup();
  const float &prefire2016_sf();
  const bool &passfilter();
  const float &lep4_coneCorrPt();
  const float &bdt_jec_up_nbtags();
  const float &bdt_jec_dn_nbtags();
  const float &bdt_jer_up_nbtags();
  const float &bdt_jer_dn_nbtags();
  const float &bdt_jec_up_njets();
  const float &bdt_jec_dn_njets();
  const float &bdt_jer_up_njets();
  const float &bdt_jer_dn_njets();
  const float &bdt_jec_up_met();
  const float &bdt_jec_dn_met();
  const float &bdt_jer_up_met();
  const float &bdt_jer_dn_met();
  const float &bdt_jec_up_htb();
  const float &bdt_jec_dn_htb();
  const float &bdt_jer_up_htb();
  const float &bdt_jer_dn_htb();
  const float &bdt_jec_up_nlb40();
  const float &bdt_jec_dn_nlb40();
  const float &bdt_jer_up_nlb40();
  const float &bdt_jer_dn_nlb40();
  const float &bdt_jec_up_ntb40();
  const float &bdt_jec_dn_ntb40();
  const float &bdt_jer_up_ntb40();
  const float &bdt_jer_dn_ntb40();
  const float &bdt_disc();
  const float &bdt_disc_jec_up();
  const float &bdt_disc_jer_up();
  const float &bdt_disc_jec_dn();
  const float &bdt_disc_jer_dn();
  const float &bdt_nbtags();
  const float &bdt_njets();
  const float &bdt_met();
  const float &bdt_ptl2();
  const float &bdt_nlb40();
  const float &bdt_ntb40();
  const float &bdt_nleps();
  const float &bdt_htb();
  const float &bdt_ml1j1();
  const float &bdt_dphil1l2();
  const float &bdt_maxmjoverpt();
  const float &bdt_detal1l2();
  const float &bdt_q1();
  const float &bdt_ptj1();
  const float &bdt_ptj6();
  const float &bdt_ptj7();
  const float &bdt_ptj8();
  const float &bdt_ptl1();
  const float &bdt_ptl3();
	const vector<float> &jet_pt();
	const float &metphi3p0();
	const bool &passes_met_filters();
	const bool &failsRA2Filter();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &mostJets();
	const bool &madeExtraZ();
	const bool &madeExtraG();
	const int &lep3_mcid();
	const int &lep3_mcidx();
	const int &lep4_mcid();
	const int &lep4_mcidx();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &mostJets_rawp4();
	const vector<float> &mostJets_disc();
	const vector<float> &mostJets_unc();
	const vector<float> &mostJets_JEC();
	const vector<float> &mostJets_undoJEC();
	const vector<bool> &mostJets_passID();
	const vector<bool> &mostJets_passCleaning();
	const int &njets_unc_up();
	const int &njets_unc_dn();
	const float &ht_unc_up();
	const float &ht_unc_dn();
	const int &nbtags_unc_up();
	const int &nbtags_unc_dn();
	const float &met_unc_up();
	const float &met_unc_dn();
	const float &metPhi_unc_up();
	const float &metPhi_unc_dn();
	const int &njets_JER_up();
	const int &njets_JER_dn();
	const float &ht_JER_up();
	const float &ht_JER_dn();
	const int &nbtags_JER_up();
	const int &nbtags_JER_dn();
	const float &met_JER_up();
	const float &met_JER_dn();
	const float &metPhi_JER_up();
	const float &metPhi_JER_dn();
	const bool &passedFilterList();
	const bool &lep2_genps_isHardProcess();
	const bool &lep2_genps_fromHardProcessFinalState();
	const bool &lep2_genps_fromHardProcessDecayed();
	const bool &lep2_genps_isDirectHardProcessTauDecayProductFinalState();
	const bool &lep2_genps_fromHardProcessBeforeFSR();
	const bool &lep2_genps_isLastCopy();
	const bool &lep2_genps_isLastCopyBeforeFSR();
	const bool &lep1_genps_isHardProcess();
	const bool &lep1_genps_fromHardProcessFinalState();
	const bool &lep1_genps_fromHardProcessDecayed();
	const bool &lep1_genps_isDirectHardProcessTauDecayProductFinalState();
	const bool &lep1_genps_fromHardProcessBeforeFSR();
	const bool &lep1_genps_isLastCopy();
	const bool &lep1_genps_isLastCopyBeforeFSR();
	const int &lep1_mc3idx();
	const int &lep2_mc3idx();
	const bool &lep1_el_conv_vtx_flag();
	const bool &lep2_el_conv_vtx_flag();
	const int &lep1_el_exp_innerlayers();
	const bool &lep1_mu_ptErr();
	const bool &lep2_mu_ptErr();
	const bool &lep1_el_threeChargeAgree();
	const bool &lep2_el_threeChargeAgree();
	const int &lep2_el_exp_innerlayers();
	const bool &lep1_nPixelMiss();
	const bool &lep2_nPixelMiss();
	const bool &lep1_tightCharge();
	const bool &lep2_tightCharge();
	const bool &is_fastsim();
	const bool &lep1_isGoodLeg();
	const bool &lep2_isGoodLeg();
	const bool &lep1_isFakeLeg();
	const bool &lep2_isFakeLeg();
	const bool &lep1_multiIso();
	const bool &lep2_multiIso();
	const float &lep1_sip();
	const float &lep2_sip();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &lep1_closeJet();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &lep2_closeJet();
	const bool &passed_id_inSituFR_lep1();
	const bool &passed_id_inSituFR_lep2();
	const bool &fired_trigger();
  const bool &fired_trigger_ss();
	const unsigned int &triggers();
	const unsigned int &triggers1lep();
	const float &weight_btagsf();
	const float &weight_btagsf_UP();
	const float &weight_btagsf_DN();
  const int &nhiggs();
  const float &prefire_sf();
  const float &prefire_sfdown();
  const float &prefire_sfup();
  const float &weight_btagsf_heavy_UP();
  const float &weight_btagsf_heavy_DN();
  const float &weight_btagsf_light_UP();
  const float &weight_btagsf_light_DN();
	const float &weight_scale_UP();
	const float &weight_scale_DN();
	const float &weight_fsrvar_UP();
	const float &weight_fsrvar_DN();
	const float &weight_isrvar_UP();
	const float &weight_isrvar_DN();
	const float &weight_alphas_UP();
	const float &weight_alphas_DN();
	const float &weight_pdf_UP();
	const float &weight_pdf_DN();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &gl1_p4();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &gl2_p4();
	const float &decayWSF();
	const float &isr_unc();
	const int &nisrMatch();
	const int &nhadronicW();
	const int &extragenb();
	const float &weight_isr();
	const float &weight_isr_UP();
	const float &weight_isr_tt();
	const float &weight_isr_dy();
	const float &weight_isr_DN();
	const bool &lep3_el_etaSC();
	const bool &lep3_el_conv_vtx_flag();
	const bool &lep3_el_exp_innerlayers();
	const bool &lep3_el_threeChargeAgree();
	const bool &lep3_el_dxyPV();
	const bool &lep3_el_ip3d();
	const bool &lep3_el_dzPV();
	const float &lep3_el_MVA_value();
	const bool &lep3_el_MVA();
	const bool &lep3_iso_RA5();
	const bool &lep3_iso_RA7();
	const bool &lep3_passes_RA5();
	const bool &lep3_passes_RA7();
	const bool &lep3_passes_RA7v2();
	const bool &lep3_mu_dxyPV();
	const bool &lep3_mu_ip3d();
	const bool &lep3_mu_dzPV();
	const bool &lep3_mu_ptErr();
	const bool &lep4_el_etaSC();
	const bool &lep4_el_conv_vtx_flag();
	const bool &lep4_el_exp_innerlayers();
	const bool &lep4_el_threeChargeAgree();
	const bool &lep4_el_dxyPV();
	const bool &lep4_el_ip3d();
	const bool &lep4_el_dzPV();
	const float &lep4_el_MVA_value();
	const bool &lep4_el_MVA();
	const bool &lep4_iso_RA5();
	const bool &lep4_iso_RA7();
	const bool &lep4_passes_RA5();
	const bool &lep4_passes_RA7();
	const bool &lep4_mu_dxyPV();
	const bool &lep4_mu_ip3d();
	const bool &lep4_mu_dzPV();
	const bool &lep4_mu_ptErr();
	const bool &lep3_isTrigSafeNoIsov1();
	const bool &lep1_isTrigSafev1();
	const bool &lep4_isTrigSafeNoIsov1();
	const bool &lep2_isTrigSafev1();
	const bool &skim();

  static void progress( int curr, int tot, int period=10000, unsigned int smoothing=250 );
};

#ifndef __CINT__
extern SSAG samesign;
#endif

namespace ss {
	const bool &lep1_isPrompt();
	const bool &lep1_isDirectPrompt();
	const bool &lep1_isStat3();
	const bool &lep2_isPrompt();
	const bool &lep2_isDirectPrompt();
	const bool &lep2_isStat3();
	const float &met();
	const float &modmet();
	const int &filenumber();
	const float &metPhi();
	const float &rawmet();
	const float &calomet();
	const float &rawmetPhi();
	const float &modmetPhi();
	const unsigned long long &event();
	const int &lumi();
	const int &run();
	const bool &filt_csc();
	const bool &filt_hbhe();
	const bool &filt_hcallaser();
	const bool &filt_ecaltp();
	const bool &filt_trkfail();
	const bool &is_real_data();
	const float &scale1fb();
	const float &xsec();
	const float &xsec_ps();
	const vector<TString> &sparmNames();
	const vector<float> &sparms();
	const float &xsec_error();
	const float &kfactor();
	const float &gen_met();
	const vector<float> &genweights();
	const vector<string> &genweightsID();
	const float &gen_met_phi();
	const int &njets();
	const int &njets_raw();
	const int &hyp_class();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &lep1_p4();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &lep2_p4();
	const float &ht_raw();
	const float &ht();
	const int &lep1_motherID();
	const int &lep2_motherID();
	const int &lep3_motherID();
	const int &lep1_mc_id();
	const int &lep2_mc_id();
	const int &lep1_id();
	const int &lep2_id();
	const float &lep1_coneCorrPt();
	const float &lep2_coneCorrPt();
	const float &lep3_coneCorrPt();
	const int &lep1_idx();
	const int &lep2_idx();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &jets();
	const vector<float> &btags_disc();
	const vector<float> &btags_disc_mva();
	const vector<float> &btags_disc_ivf();
	const vector<float> &jets_disc();
	const vector<float> &jets_disc_mva();
	const vector<float> &jets_disc_csv();
	const vector<float> &jets_JEC();
	const vector<float> &btags_JEC();
	const vector<float> &jets_undoJEC();
	const vector<float> &btags_undoJEC();
	const vector<float> &btags_unc();
	const vector<float> &jets_unc();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &btags();
	const int &nbtags();
	const int &ncharginos();
	const int &higgs_mass();
	const int &nbtags_raw();
	const float &sf_dilepTrig_hpt();
	const float &sf_dilepTrig_lpt();
	const float &sf_dilepTrig_vlpt();
	const int &hyp_type();
	const float &sf_dilep_eff();
	const float &mt();
	const float &mt_l2();
	const float &mt2();
	const float &mtmin();
	const int &lep1_id_gen();
	const int &lep2_id_gen();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &lep1_p4_gen();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &lep2_p4_gen();
	const int &lep3_id();
	const int &lep3_idx();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &lep3_p4();
	const int &lep3_quality();
	const int &lep4_id();
	const int &lep4_idx();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &lep4_p4();
	const float &lep1_iso();
	const float &lep2_iso();
	const float &lep1_tkIso();
	const float &lep2_tkIso();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &dilep_p4();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genps_p4();
	const vector<int> &genps_id();
	const vector<int> &genps_id_mother();
	const vector<int> &genps_idx_mother();
	const vector<int> &genps_status();
	const vector<int> &jets_flavor();
	const vector<int> &btags_flavor();
	const vector<int> &genps_id_grandma();
	const bool &lep1_passes_id();
	const bool &lep2_passes_id();
	const bool &lep3_passes_id();
	const bool &lep4_passes_id();
	const bool &lep1_tight();
	const bool &lep1_veto();
	const bool &lep1_fo();
	const bool &lep2_tight();
	const bool &lep2_veto();
	const bool &lep2_fo();
	const bool &lep3_tight();
	const bool &lep3_veto();
	const bool &lep3_fo();
	const bool &lep4_tight();
	const bool &lep4_veto();
	const bool &lep4_fo();
	const float &lep1_dxyPV();
	const float &lep2_dxyPV();
	const float &lep1_dZ();
	const float &lep2_dZ();
	const float &lep1_d0_err();
	const float &lep2_d0_err();
	const float &lep1_ip3d();
	const float &lep2_ip3d();
	const float &lep1_MVA();
	const float &lep2_MVA();
	const float &lep1_MVA_miniaod();
	const float &lep2_MVA_miniaod();
	const float &lep1_ip3d_err();
	const float &lep2_ip3d_err();
	const int &nVetoElectrons7();
	const int &nVetoElectrons10();
	const int &nVetoElectrons25();
	const int &nVetoMuons5();
	const int &nVetoMuons10();
	const int &nVetoMuons25();
	const string &filename();
	const float &lep1_ptrel_v0();
	const float &lep1_ptrel_v1();
	const float &lep2_ptrel_v0();
	const float &lep2_ptrel_v1();
	const float &lep1_miniIso();
	const float &lep2_miniIso();
	const float &lep1_ptratio();
	const float &lep2_ptratio();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &jet_close_lep1();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &jet_close_lep2();
	const vector<int> &eleID_kfhits();
	const vector<float> &eleID_oldsigmaietaieta();
	const vector<float> &eleID_oldsigmaiphiiphi();
	const vector<float> &eleID_oldcircularity();
	const vector<float> &eleID_oldr9();
	const vector<float> &eleID_scletawidth();
	const vector<float> &eleID_sclphiwidth();
	const vector<float> &eleID_he();
	const vector<float> &eleID_psEoverEraw();
	const vector<float> &eleID_kfchi2();
	const vector<float> &eleID_chi2_hits();
	const vector<float> &eleID_fbrem();
	const vector<float> &eleID_ep();
	const vector<float> &eleID_eelepout();
	const vector<float> &eleID_IoEmIop();
	const vector<float> &eleID_deltaetain();
	const vector<float> &eleID_deltaphiin();
	const vector<float> &eleID_deltaetaseed();
	const vector<float> &eleID_pT();
	const vector<bool> &eleID_isbarrel();
	const vector<bool> &eleID_isendcap();
	const vector<float> &eleID_scl_eta();
	const vector<float> &muID_dzPV();
	const vector<float> &muID_ptSig();
	const vector<float> &muID_ip3dSig();
	const vector<float> &muID_medMuonPOG();
	const vector<float> &muID_pt();
	const vector<float> &muID_eta();
	const vector<float> &trueNumInt();
	const vector<int> &nPUvertices();
	const int &nGoodVertices();
	const bool &lep1_trigMatch_noIsoReq();
	const bool &lep1_trigMatch_isoReq();
	const bool &lep2_trigMatch_noIsoReq();
	const bool &lep2_trigMatch_isoReq();
	const float &met3p0();
  const float &weight();
  const vector<float> &btags_cdisc();
  const int &bdt_nforwardjets20();
  const float &bdt_avgcdisc();
  const int &ntrijets();
  const float &trijet_njetsnonb();
  const float &trijet_njetsb();
  const float &trijet_meandisc();
  const float &trijet_leadingdisc();
  const float &trijet_subleadingdisc();
  const int &trijet_numhigh();
  const float &trijet_frachigh();
  const float &prefire2017_sfdown();
  const float &prefire2017_sfup();
  const float &prefire2017_sf();
  const float &prefire2016_sfdown();
  const float &prefire2016_sfup();
  const float &prefire2016_sf();
  const bool &passfilter();
  const float &lep4_coneCorrPt();
  const float &bdt_jec_up_nbtags();
  const float &bdt_jec_dn_nbtags();
  const float &bdt_jer_up_nbtags();
  const float &bdt_jer_dn_nbtags();
  const float &bdt_jec_up_njets();
  const float &bdt_jec_dn_njets();
  const float &bdt_jer_up_njets();
  const float &bdt_jer_dn_njets();
  const float &bdt_jec_up_met();
  const float &bdt_jec_dn_met();
  const float &bdt_jer_up_met();
  const float &bdt_jer_dn_met();
  const float &bdt_jec_up_htb();
  const float &bdt_jec_dn_htb();
  const float &bdt_jer_up_htb();
  const float &bdt_jer_dn_htb();
  const float &bdt_jec_up_nlb40();
  const float &bdt_jec_dn_nlb40();
  const float &bdt_jer_up_nlb40();
  const float &bdt_jer_dn_nlb40();
  const float &bdt_jec_up_ntb40();
  const float &bdt_jec_dn_ntb40();
  const float &bdt_jer_up_ntb40();
  const float &bdt_jer_dn_ntb40();
  const float &bdt_disc();
  const float &bdt_disc_jec_up();
  const float &bdt_disc_jer_up();
  const float &bdt_disc_jec_dn();
  const float &bdt_disc_jer_dn();
  const float &bdt_nbtags();
  const float &bdt_njets();
  const float &bdt_met();
  const float &bdt_ptl2();
  const float &bdt_nlb40();
  const float &bdt_ntb40();
  const float &bdt_nleps();
  const float &bdt_htb();
  const float &bdt_ml1j1();
  const float &bdt_dphil1l2();
  const float &bdt_maxmjoverpt();
  const float &bdt_detal1l2();
  const float &bdt_q1();
  const float &bdt_ptj1();
  const float &bdt_ptj6();
  const float &bdt_ptj7();
  const float &bdt_ptj8();
  const float &bdt_ptl1();
  const float &bdt_ptl3();
	const vector<float> &jet_pt();
	const float &metphi3p0();
	const bool &passes_met_filters();
	const bool &failsRA2Filter();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &mostJets();
	const bool &madeExtraZ();
	const bool &madeExtraG();
	const int &lep3_mcid();
	const int &lep3_mcidx();
	const int &lep4_mcid();
	const int &lep4_mcidx();
	const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &mostJets_rawp4();
	const vector<float> &mostJets_disc();
	const vector<float> &mostJets_unc();
	const vector<float> &mostJets_JEC();
	const vector<float> &mostJets_undoJEC();
	const vector<bool> &mostJets_passID();
	const vector<bool> &mostJets_passCleaning();
	const int &njets_unc_up();
	const int &njets_unc_dn();
	const float &ht_unc_up();
	const float &ht_unc_dn();
	const int &nbtags_unc_up();
	const int &nbtags_unc_dn();
	const float &met_unc_up();
	const float &met_unc_dn();
	const float &metPhi_unc_up();
	const float &metPhi_unc_dn();
	const int &njets_JER_up();
	const int &njets_JER_dn();
	const float &ht_JER_up();
	const float &ht_JER_dn();
	const int &nbtags_JER_up();
	const int &nbtags_JER_dn();
	const float &met_JER_up();
	const float &met_JER_dn();
	const float &metPhi_JER_up();
	const float &metPhi_JER_dn();
	const bool &passedFilterList();
	const bool &lep2_genps_isHardProcess();
	const bool &lep2_genps_fromHardProcessFinalState();
	const bool &lep2_genps_fromHardProcessDecayed();
	const bool &lep2_genps_isDirectHardProcessTauDecayProductFinalState();
	const bool &lep2_genps_fromHardProcessBeforeFSR();
	const bool &lep2_genps_isLastCopy();
	const bool &lep2_genps_isLastCopyBeforeFSR();
	const bool &lep1_genps_isHardProcess();
	const bool &lep1_genps_fromHardProcessFinalState();
	const bool &lep1_genps_fromHardProcessDecayed();
	const bool &lep1_genps_isDirectHardProcessTauDecayProductFinalState();
	const bool &lep1_genps_fromHardProcessBeforeFSR();
	const bool &lep1_genps_isLastCopy();
	const bool &lep1_genps_isLastCopyBeforeFSR();
	const int &lep1_mc3idx();
	const int &lep2_mc3idx();
	const bool &lep1_el_conv_vtx_flag();
	const bool &lep2_el_conv_vtx_flag();
	const int &lep1_el_exp_innerlayers();
	const bool &lep1_mu_ptErr();
	const bool &lep2_mu_ptErr();
	const bool &lep1_el_threeChargeAgree();
	const bool &lep2_el_threeChargeAgree();
	const int &lep2_el_exp_innerlayers();
	const bool &lep1_nPixelMiss();
	const bool &lep2_nPixelMiss();
	const bool &lep1_tightCharge();
	const bool &lep2_tightCharge();
	const bool &is_fastsim();
	const bool &lep1_isGoodLeg();
	const bool &lep2_isGoodLeg();
	const bool &lep1_isFakeLeg();
	const bool &lep2_isFakeLeg();
	const bool &lep1_multiIso();
	const bool &lep2_multiIso();
	const float &lep1_sip();
	const float &lep2_sip();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &lep1_closeJet();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &lep2_closeJet();
	const bool &passed_id_inSituFR_lep1();
	const bool &passed_id_inSituFR_lep2();
	const bool &fired_trigger();
  const bool &fired_trigger_ss();
	const unsigned int &triggers();
	const unsigned int &triggers1lep();
	const float &weight_btagsf();
	const float &weight_btagsf_UP();
	const float &weight_btagsf_DN();
  const int &nhiggs();
  const float &prefire_sf();
  const float &prefire_sfdown();
  const float &prefire_sfup();
  const float &weight_btagsf_heavy_UP();
  const float &weight_btagsf_heavy_DN();
  const float &weight_btagsf_light_UP();
  const float &weight_btagsf_light_DN();
	const float &weight_scale_UP();
	const float &weight_scale_DN();
	const float &weight_fsrvar_UP();
	const float &weight_fsrvar_DN();
	const float &weight_isrvar_UP();
	const float &weight_isrvar_DN();
	const float &weight_alphas_UP();
	const float &weight_alphas_DN();
	const float &weight_pdf_UP();
	const float &weight_pdf_DN();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &gl1_p4();
	const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &gl2_p4();
	const float &decayWSF();
	const float &isr_unc();
	const int &nisrMatch();
	const int &nhadronicW();
	const int &extragenb();
	const float &weight_isr();
	const float &weight_isr_UP();
	const float &weight_isr_tt();
	const float &weight_isr_dy();
	const float &weight_isr_DN();
	const bool &lep3_el_etaSC();
	const bool &lep3_el_conv_vtx_flag();
	const bool &lep3_el_exp_innerlayers();
	const bool &lep3_el_threeChargeAgree();
	const bool &lep3_el_dxyPV();
	const bool &lep3_el_ip3d();
	const bool &lep3_el_dzPV();
	const float &lep3_el_MVA_value();
	const bool &lep3_el_MVA();
	const bool &lep3_iso_RA5();
	const bool &lep3_iso_RA7();
	const bool &lep3_passes_RA5();
	const bool &lep3_passes_RA7();
	const bool &lep3_passes_RA7v2();
	const bool &lep3_mu_dxyPV();
	const bool &lep3_mu_ip3d();
	const bool &lep3_mu_dzPV();
	const bool &lep3_mu_ptErr();
	const bool &lep4_el_etaSC();
	const bool &lep4_el_conv_vtx_flag();
	const bool &lep4_el_exp_innerlayers();
	const bool &lep4_el_threeChargeAgree();
	const bool &lep4_el_dxyPV();
	const bool &lep4_el_ip3d();
	const bool &lep4_el_dzPV();
	const float &lep4_el_MVA_value();
	const bool &lep4_el_MVA();
	const bool &lep4_iso_RA5();
	const bool &lep4_iso_RA7();
	const bool &lep4_passes_RA5();
	const bool &lep4_passes_RA7();
	const bool &lep4_mu_dxyPV();
	const bool &lep4_mu_ip3d();
	const bool &lep4_mu_dzPV();
	const bool &lep4_mu_ptErr();
	const bool &lep3_isTrigSafeNoIsov1();
	const bool &lep1_isTrigSafev1();
	const bool &lep4_isTrigSafeNoIsov1();
	const bool &lep2_isTrigSafev1();
	const bool &skim();
}
#endif
